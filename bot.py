import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, time, timedelta
import pytz
import os
import json
import asyncio
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8409056345:AAEgAOIvZsKO5aezqNoLT8AZbybidygFmhM')

# –¢–∞–π–º–∑–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
AUTO_REPLY_MESSAGE = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∫–æ–º–ø–∞–Ω–∏–∏!

–ú—ã –æ—Ç–≤–µ—á–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É | c 10:00 –¥–æ 19:00 –ø–æ –ú–°–ö

ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
üè∑Ô∏è `/price` - –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
üìã `/reglament` - –†–µ–≥–ª–∞–º–µ–Ω—Ç
‚ùì `/help_client` - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

**—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ**"""

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = {7842709072, 1772492746}

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
FLAGS_FILE = "auto_reply_flags.json"
WORK_CHAT_FILE = "work_chat.json"
PENDING_MESSAGES_FILE = "pending_messages.json"
FUNNELS_CONFIG_FILE = "funnels_config.json"
EXCLUDED_USERS_FILE = "excluded_users.json"
FUNNELS_STATE_FILE = "funnels_state.json"
MASTER_NOTIFICATION_FILE = "master_notification.json"
CUSTOM_COMMANDS_FILE = "custom_commands.json"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
application = None

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–°–¢–û–ú–ù–´–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò ==========

class CustomCommandsManager:
    def __init__(self):
        self.commands = self.load_commands()
    
    def load_commands(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(CUSTOM_COMMANDS_FILE):
                with open(CUSTOM_COMMANDS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")
        return {}
    
    def save_commands(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(CUSTOM_COMMANDS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.commands, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")
    
    def add_command(self, command_name: str, content_type: str, content: str, description: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏ —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        self.commands[command_name] = {
            'type': content_type,
            'content': content,
            'description': description,
            'created_at': datetime.now(MOSCOW_TZ).isoformat()
        }
        self.save_commands()
        
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê
        global application
        if application:
            self.register_command_handler(command_name)
            logger.info(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è: /{command_name}")
    
    def register_command_handler(self, command_name: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        global application
        if application:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            for handler in application.handlers[0]:
                if (isinstance(handler, CommandHandler) and 
                    handler.commands and 
                    command_name in handler.commands):
                    application.handlers[0].remove(handler)
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            application.add_handler(CommandHandler(command_name, handle_custom_command))
    
    def register_all_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        global application
        if application:
            for command_name in self.commands.keys():
                self.register_command_handler(command_name)
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è {len(self.commands)} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    
    def remove_command(self, command_name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –µ—ë –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        if command_name in self.commands:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            cmd = self.commands[command_name]
            if cmd['type'] in ['photo', 'document', 'video', 'audio']:
                file_path = os.path.join('assets', cmd['content'])
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
            # –£–î–ê–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
            global application
            if application:
                for handler in application.handlers[0]:
                    if (isinstance(handler, CommandHandler) and 
                        handler.commands and 
                        command_name in handler.commands):
                        application.handlers[0].remove(handler)
                        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è: /{command_name}")
                        break
            
            del self.commands[command_name]
            self.save_commands()
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞: /{command_name}")
            return True
        return False
    
    def get_command(self, command_name: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏"""
        return self.commands.get(command_name)
    
    def get_all_commands(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
        return self.commands

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–õ–ê–í–ù–´–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú ==========

class MasterNotificationManager:
    def __init__(self):
        self.data = self.load_data()
        self.last_notification_time = None
        self.notification_cooldown = 900  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(MASTER_NOTIFICATION_FILE):
                with open(MASTER_NOTIFICATION_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"message_ids": [], "last_update": None}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(MASTER_NOTIFICATION_FILE, 'w') as f:
                json.dump(self.data, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def add_message_id(self, message_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫"""
        if "message_ids" not in self.data:
            self.data["message_ids"] = []
        
        self.data["message_ids"].append(message_id)
        self.data["last_update"] = datetime.now(MOSCOW_TZ).isoformat()
        self.save_data()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {message_id}")
    
    def get_message_ids(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.data.get("message_ids", [])
    
    def clear_old_messages(self, keep_last: int = 3):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"""
        if "message_ids" in self.data and len(self.data["message_ids"]) > keep_last:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ keep_last —Å–æ–æ–±—â–µ–Ω–∏–π
            self.data["message_ids"] = self.data["message_ids"][-keep_last:]
            self.save_data()
    
    def should_update(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)"""
        # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not self.last_notification_time:
            return True
        
        now = datetime.now(MOSCOW_TZ)
        time_diff = now - self.last_notification_time
        
        return time_diff.total_seconds() >= self.notification_cooldown
    
    def update_notification_time(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.last_notification_time = datetime.now(MOSCOW_TZ)
        logger.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {self.last_notification_time.strftime('%H:%M:%S')}")

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ï–ú –í–û–†–û–ù–û–ö ==========

class FunnelsStateManager:
    def __init__(self):
        self.state = self.load_state()
    
    def load_state(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(FUNNELS_STATE_FILE):
                with open(FUNNELS_STATE_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫: {e}")
        
        return {
            "last_funnel_1_check": None,
            "last_funnel_2_check": None, 
            "last_funnel_3_check": None,
            "funnel_1_messages_processed": [],
            "funnel_2_messages_processed": [],
            "funnel_3_messages_processed": []
        }
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(FUNNELS_STATE_FILE, 'w') as f:
                json.dump(self.state, f, indent=2, default=str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫: {e}")
    
    def update_last_check(self, funnel_number: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        self.state[f"last_funnel_{funnel_number}_check"] = datetime.now(MOSCOW_TZ).isoformat()
        self.save_state()
    
    def get_last_check(self, funnel_number: int) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        timestamp = self.state.get(f"last_funnel_{funnel_number}_check")
        if timestamp:
            return datetime.fromisoformat(timestamp)
        return datetime.now(MOSCOW_TZ) - timedelta(days=1)
    
    def add_processed_message(self, funnel_number: int, message_key: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        key = f"funnel_{funnel_number}_messages_processed"
        if message_key not in self.state[key]:
            self.state[key].append(message_key)
            self.save_state()
    
    def is_message_processed(self, funnel_number: int, message_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ—Ä–æ–Ω–∫–æ–π"""
        key = f"funnel_{funnel_number}_messages_processed"
        return message_key in self.state[key]
    
    def clear_processed_messages(self, funnel_number: int):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        key = f"funnel_{funnel_number}_messages_processed"
        self.state[key] = []
        self.save_state()

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò ==========

class ExcludedUsersManager:
    def __init__(self):
        self.excluded_users = self.load_excluded_users()
    
    def load_excluded_users(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(EXCLUDED_USERS_FILE):
                with open(EXCLUDED_USERS_FILE, 'r') as f:
                    data = json.load(f)
                    return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
        return {
            "user_ids": [433733509, 1772492746, 1661202178, 478084322, 868325393, 1438860417, 879901619, 6107771545, 253353687, 2113096625, 91047831, 7842709072],
            "usernames": []
        }
    
    def save_excluded_users(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(EXCLUDED_USERS_FILE, 'w') as f:
                json.dump(self.excluded_users, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def is_user_excluded(self, user_id: int, username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º"""
        if user_id in self.excluded_users["user_ids"]:
            return True
        
        if username and username.lower() in [u.lower() for u in self.excluded_users["usernames"]]:
            return True
        
        return False
    
    def add_user_id(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        if user_id not in self.excluded_users["user_ids"]:
            self.excluded_users["user_ids"].append(user_id)
            self.save_excluded_users()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ID –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {user_id}")
            return True
        return False
    
    def add_username(self, username: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç username –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        username = username.lstrip('@').lower()
        if username not in [u.lower() for u in self.excluded_users["usernames"]]:
            self.excluded_users["usernames"].append(username)
            self.save_excluded_users()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω username –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: @{username}")
            return True
        return False
    
    def remove_user_id(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        if user_id in self.excluded_users["user_ids"]:
            self.excluded_users["user_ids"].remove(user_id)
            self.save_excluded_users()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω ID –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {user_id}")
            return True
        return False
    
    def remove_username(self, username: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç username –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        username = username.lstrip('@').lower()
        for u in self.excluded_users["usernames"]:
            if u.lower() == username:
                self.excluded_users["usernames"].remove(u)
                self.save_excluded_users()
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω username –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: @{username}")
                return True
        return False
    
    def get_all_excluded(self) -> Dict[str, List]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.excluded_users
    
    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        self.excluded_users = {"user_ids": [], "usernames": []}
        self.save_excluded_users()
        logger.info("‚úÖ –í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

# ========== –ö–õ–ê–°–°–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò ==========

class FunnelsConfig:
    def __init__(self):
        self.funnels = self.load_funnels()
    
    def load_funnels(self) -> Dict[int, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è"""
        try:
            if os.path.exists(FUNNELS_CONFIG_FILE):
                with open(FUNNELS_CONFIG_FILE, 'r') as f:
                    data = json.load(f)
                    return {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–æ–∫: {e}")
        
        return {
            1: 60,    # 1 —á–∞—Å
            2: 180,   # 3 —á–∞—Å–∞  
            3: 300    # 5 —á–∞—Å–æ–≤
        }
    
    def save_funnels(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(FUNNELS_CONFIG_FILE, 'w') as f:
                json.dump(self.funnels, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–æ–∫: {e}")
    
    def get_funnels(self) -> Dict[int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–æ–∫"""
        return self.funnels
    
    def set_funnel_interval(self, funnel_number: int, minutes: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏"""
        if funnel_number in [1, 2, 3] and minutes > 0:
            self.funnels[funnel_number] = minutes
            self.save_funnels()
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ {funnel_number}: {minutes} –º–∏–Ω—É—Ç")
            return True
        return False
    
    def get_funnel_interval(self, funnel_number: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏"""
        return self.funnels.get(funnel_number, 0)
    
    def reset_to_default(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.funnels = {1: 60, 2: 180, 3: 300}
        self.save_funnels()
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

class AutoReplyFlags:
    def __init__(self):
        self.flags = self.load_flags()
    
    def load_flags(self) -> Dict[str, bool]:
        try:
            if os.path.exists(FLAGS_FILE):
                with open(FLAGS_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–ª–∞–≥–æ–≤: {e}")
        return {}
    
    def save_flags(self):
        try:
            with open(FLAGS_FILE, 'w') as f:
                json.dump(self.flags, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤: {e}")
    
    def has_replied(self, key: str) -> bool:
        return self.flags.get(key, False)
    
    def set_replied(self, key: str):
        self.flags[key] = True
        self.save_flags()
    
    def clear_replied(self, key: str):
        if key in self.flags:
            del self.flags[key]
            self.save_flags()
    
    def clear_all(self):
        self.flags = {}
        self.save_flags()
    
    def count_flags(self):
        return len(self.flags)

class WorkChatManager:
    def __init__(self):
        self.work_chat_id = self.load_work_chat()
    
    def load_work_chat(self):
        try:
            if os.path.exists(WORK_CHAT_FILE):
                with open(WORK_CHAT_FILE, 'r') as f:
                    data = json.load(f)
                    return data.get('work_chat_id')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞: {e}")
        return None
    
    def save_work_chat(self, chat_id):
        try:
            with open(WORK_CHAT_FILE, 'w') as f:
                json.dump({'work_chat_id': chat_id}, f)
            self.work_chat_id = chat_id
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞: {e}")
            return False
    
    def get_work_chat_id(self):
        return self.work_chat_id
    
    def is_work_chat_set(self):
        return self.work_chat_id is not None

class PendingMessagesManager:
    def __init__(self, funnels_config: FunnelsConfig):
        self.pending_messages = self.load_pending_messages()
        self.funnels_config = funnels_config
    
    def load_pending_messages(self) -> Dict[str, Any]:
        try:
            if os.path.exists(PENDING_MESSAGES_FILE):
                with open(PENDING_MESSAGES_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}
    
    def save_pending_messages(self):
        try:
            with open(PENDING_MESSAGES_FILE, 'w') as f:
                json.dump(self.pending_messages, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def add_message(self, chat_id: int, user_id: int, message_text: str, message_id: int, chat_title: str = None, username: str = None, first_name: str = None):
        key = f"{chat_id}_{user_id}_{message_id}_{int(datetime.now().timestamp())}"
        
        if not message_text:
            message_text = "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
        
        self.pending_messages[key] = {
            'chat_id': chat_id,
            'user_id': user_id,
            'message_text': message_text,
            'message_id': message_id,
            'chat_title': chat_title,
            'username': username,
            'first_name': first_name,
            'timestamp': datetime.now(MOSCOW_TZ).isoformat(),
            'funnels_sent': [],
            'current_funnel': 0,
            'message_key': key
        }
        self.save_pending_messages()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {key}")
    
    def remove_message_by_key(self, key: str):
        if key in self.pending_messages:
            del self.pending_messages[key]
            self.save_pending_messages()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {key}")
            return True
        return False
    
    def remove_all_chat_messages(self, chat_id: int, user_id: int = None):
        keys_to_remove = []
        for key, message in self.pending_messages.items():
            if message['chat_id'] == chat_id:
                if user_id is None or message['user_id'] == user_id:
                    keys_to_remove.append(key)
        
        for key in keys_to_remove:
            del self.pending_messages[key]
        
        if keys_to_remove:
            self.save_pending_messages()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(keys_to_remove)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}")
            return len(keys_to_remove)
        return 0
    
    def get_all_pending_messages(self) -> List[Dict[str, Any]]:
        return list(self.pending_messages.values())
    
    def mark_funnel_sent(self, message_key: str, funnel_number: int):
        if message_key in self.pending_messages:
            if funnel_number not in self.pending_messages[message_key]['funnels_sent']:
                self.pending_messages[message_key]['funnels_sent'].append(funnel_number)
                self.pending_messages[message_key]['current_funnel'] = funnel_number
                self.save_pending_messages()
    
    def find_messages_by_chat(self, chat_id: int) -> List[Dict[str, Any]]:
        result = []
        for message in self.pending_messages.values():
            if message['chat_id'] == chat_id:
                result.append(message)
        return result
    
    def get_messages_for_funnel(self, funnel_number: int, funnels_state: FunnelsStateManager) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏ - –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê"""
        result = []
        now = datetime.now(MOSCOW_TZ)
        FUNNELS = self.funnels_config.get_funnels()
        funnel_minutes = FUNNELS[funnel_number]
        
        for message_key, message in self.pending_messages.items():
            timestamp = datetime.fromisoformat(message['timestamp'])
            time_diff = now - timestamp
            minutes_passed = int(time_diff.total_seconds() / 60)
            
            funnels_sent = message.get('funnels_sent', [])
            
            # –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ—Ä–æ–Ω–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            if (minutes_passed >= funnel_minutes and 
                funnel_number not in funnels_sent):
                message['message_key'] = message_key
                message['minutes_passed'] = minutes_passed
                result.append(message)
        
        return result
    
    def update_funnel_statuses(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫ - –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê"""
        updated_count = 0
        now = datetime.now(MOSCOW_TZ)
        FUNNELS = self.funnels_config.get_funnels()
        
        for message_key, message in self.pending_messages.items():
            timestamp = datetime.fromisoformat(message['timestamp'])
            time_diff = now - timestamp
            minutes_passed = int(time_diff.total_seconds() / 60)
            
            current_funnel = message.get('current_funnel', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–æ—Ä–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            new_funnel = 0
            if minutes_passed >= FUNNELS[3]:
                new_funnel = 3
            elif minutes_passed >= FUNNELS[2]:
                new_funnel = 2
            elif minutes_passed >= FUNNELS[1]:
                new_funnel = 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if new_funnel != current_funnel:
                self.pending_messages[message_key]['current_funnel'] = new_funnel
                updated_count += 1
                logger.info(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {message_key}: –≤–æ—Ä–æ–Ω–∫–∞ {current_funnel} -> {new_funnel} ({minutes_passed} –º–∏–Ω—É—Ç)")
        
        if updated_count > 0:
            self.save_pending_messages()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫: {updated_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return updated_count
    
    def get_all_messages_older_than(self, minutes_threshold: int) -> List[Dict[str, Any]]:
        result = []
        now = datetime.now(MOSCOW_TZ)
        
        for message_key, message in self.pending_messages.items():
            timestamp = datetime.fromisoformat(message['timestamp'])
            time_diff = now - timestamp
            minutes_passed = int(time_diff.total_seconds() / 60)
            
            if minutes_passed >= minutes_threshold:
                message['message_key'] = message_key
                message['minutes_passed'] = minutes_passed
                result.append(message)
        
        return result
    
    def clear_all(self):
        count = len(self.pending_messages)
        self.pending_messages = {}
        self.save_pending_messages()
        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({count} —à—Ç.)")
        return count

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ ==========

funnels_config = FunnelsConfig()
flags_manager = AutoReplyFlags()
work_chat_manager = WorkChatManager()
pending_messages_manager = PendingMessagesManager(funnels_config)
excluded_users_manager = ExcludedUsersManager()
funnels_state_manager = FunnelsStateManager()
master_notification_manager = MasterNotificationManager()
custom_commands_manager = CustomCommandsManager()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def ensure_assets_folder():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    assets_path = os.path.join(os.getcwd(), 'assets')
    if not os.path.exists(assets_path):
        os.makedirs(assets_path)
        logger.info(f"‚úÖ –ü–∞–ø–∫–∞ assets —Å–æ–∑–¥–∞–Ω–∞: {assets_path}")
    else:
        logger.info(f"‚úÖ –ü–∞–ø–∫–∞ assets —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {assets_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    test_file = os.path.join(assets_path, 'test.txt')
    try:
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ assets: OK")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ assets: {e}")

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_manager(user_id: int, username: str = None) -> bool:
    return excluded_users_manager.is_user_excluded(user_id, username)

def is_excluded_user(user_id: int) -> bool:
    return excluded_users_manager.is_user_excluded(user_id)

def is_working_hours():
    now = datetime.now(MOSCOW_TZ)
    current_time = now.time()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç) –∏ –≤—Ä–µ–º—è (10:00-19:00)
    is_working_day = now.weekday() < 5  # 0-4 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
    is_working_time = current_time >= time(10, 0) and current_time <= time(19, 0)
    
    result = is_working_day and is_working_time
    
    logger.info(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ {now.weekday()}, –≤—Ä–µ–º—è {current_time.strftime('%H:%M')}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–†–ê–ë–û–ß–ï–ï' if result else '–ù–ï–†–ê–ë–û–ß–ï–ï'}")
    
    return result

def get_chat_display_name(chat_data: Dict[str, Any]) -> str:
    chat_title = chat_data.get('chat_title')
    if chat_title:
        return chat_title
    else:
        return f"–ß–∞—Ç {chat_data['chat_id']}"

def get_funnel_emoji(funnel_number: int) -> str:
    emojis = {1: "üü°", 2: "üü†", 3: "üî¥"}
    return emojis.get(funnel_number, "‚ö™")

def format_time_ago(timestamp: str) -> str:
    message_time = datetime.fromisoformat(timestamp)
    now = datetime.now(MOSCOW_TZ)
    time_diff = now - message_time
    
    total_minutes = int(time_diff.total_seconds() / 60)
    hours = total_minutes // 60
    minutes = total_minutes % 60
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"

def minutes_to_hours_text(minutes: int) -> str:
    hours = minutes // 60
    if hours == 1:
        return "1 –ß–ê–°"
    elif hours == 3:
        return "3 –ß–ê–°–ê"
    elif hours == 5:
        return "5 –ß–ê–°–û–í"
    else:
        return f"{hours} –ß–ê–°–û–í"

# ========== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–û–†–û–ù–û–ö ==========

async def update_message_funnel_statuses():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫...")
    return pending_messages_manager.update_funnel_statuses()

# ========== –°–ò–°–¢–ï–ú–ê –ï–î–ò–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========

def create_master_notification_text() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –µ–¥–∏–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≤–æ—Ä–æ–Ω–∫–∞–º–∏ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤)"""
    FUNNELS = funnels_config.get_funnels()
    
    # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
    all_messages = pending_messages_manager.get_all_pending_messages()
    chats_data = {}
    
    for msg in all_messages:
        chat_id = msg['chat_id']
        if chat_id not in chats_data:
            chats_data[chat_id] = {
                'chat_info': msg,
                'message_count': 0,
                'oldest_time': msg['timestamp'],
                'current_funnel': 0
            }
        chats_data[chat_id]['message_count'] += 1
        if msg['timestamp'] < chats_data[chat_id]['oldest_time']:
            chats_data[chat_id]['oldest_time'] = msg['timestamp']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è —á–∞—Ç–∞
        current_funnel = msg.get('current_funnel', 0)
        if current_funnel > chats_data[chat_id]['current_funnel']:
            chats_data[chat_id]['current_funnel'] = current_funnel
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Ç—ã –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
    funnel_1_chats = {}
    funnel_2_chats = {}
    funnel_3_chats = {}
    
    for chat_id, chat_data in chats_data.items():
        funnel = chat_data['current_funnel']
        if funnel == 1:
            funnel_1_chats[chat_id] = chat_data
        elif funnel == 2:
            funnel_2_chats[chat_id] = chat_data
        elif funnel == 3:
            funnel_3_chats[chat_id] = chat_data
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = "üìä **–û–ë–ó–û–† –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô**\n\n"
    
    # –í–æ—Ä–æ–Ω–∫–∞ 1
    notification_text += f"üü° {minutes_to_hours_text(FUNNELS[1])} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"
    if funnel_1_chats:
        for chat_id, chat_data in funnel_1_chats.items():
            chat_display = get_chat_display_name(chat_data['chat_info'])
            message_count = chat_data['message_count']
            time_ago = format_time_ago(chat_data['oldest_time'])
            notification_text += f"  ‚Ä¢ {chat_display} ({message_count} —Å–æ–æ–±—â., {time_ago} –Ω–∞–∑–∞–¥)\n"
    else:
        notification_text += "  –¢–∞–∫–∏—Ö –Ω–µ—Ç\n"
    notification_text += "\n"
    
    # –í–æ—Ä–æ–Ω–∫–∞ 2
    notification_text += f"üü† {minutes_to_hours_text(FUNNELS[2])} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"
    if funnel_2_chats:
        for chat_id, chat_data in funnel_2_chats.items():
            chat_display = get_chat_display_name(chat_data['chat_info'])
            message_count = chat_data['message_count']
            time_ago = format_time_ago(chat_data['oldest_time'])
            notification_text += f"  ‚Ä¢ {chat_display} ({message_count} —Å–æ–æ–±—â., {time_ago} –Ω–∞–∑–∞–¥)\n"
    else:
        notification_text += "  –¢–∞–∫–∏—Ö –Ω–µ—Ç\n"
    notification_text += "\n"
    
    # –í–æ—Ä–æ–Ω–∫–∞ 3
    notification_text += f"üî¥ –ë–û–õ–ï–ï {minutes_to_hours_text(FUNNELS[3])} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"
    if funnel_3_chats:
        for chat_id, chat_data in funnel_3_chats.items():
            chat_display = get_chat_display_name(chat_data['chat_info'])
            message_count = chat_data['message_count']
            time_ago = format_time_ago(chat_data['oldest_time'])
            notification_text += f"  ‚Ä¢ {chat_display} ({message_count} —Å–æ–æ–±—â., {time_ago} –Ω–∞–∑–∞–¥)\n"
    else:
        notification_text += "  –¢–∞–∫–∏—Ö –Ω–µ—Ç\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_messages = len(all_messages)
    total_chats = len(chats_data)
    
    notification_text += f"\nüìà **–ò–¢–û–ì–û:** {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {total_chats} —á–∞—Ç–∞—Ö"
    notification_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(MOSCOW_TZ).strftime('%H:%M:%S')}"
    
    return notification_text

async def delete_old_notifications(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    work_chat_id = work_chat_manager.get_work_chat_id()
    if not work_chat_id:
        return
    
    try:
        message_ids = master_notification_manager.get_message_ids()
        for message_id in message_ids:
            try:
                await context.bot.delete_message(
                    chat_id=work_chat_id,
                    message_id=message_id
                )
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message_id}")
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        master_notification_manager.data["message_ids"] = []
        master_notification_manager.save_data()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def send_new_master_notification(context: ContextTypes.DEFAULT_TYPE, force: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ)"""
    work_chat_id = work_chat_manager.get_work_chat_id()
    if not work_chat_id:
        logger.error("‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ä–∞–±–æ—á–∏–π —á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown, –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    if not force and not master_notification_manager.should_update():
        logger.info("‚è≥ Cooldown: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (–µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 15 –º–∏–Ω—É—Ç)")
        return False
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await delete_old_notifications(context)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        notification_text = create_master_notification_text()
        
        sent_message = await context.bot.send_message(
            chat_id=work_chat_id,
            text=notification_text,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        master_notification_manager.add_message_id(sent_message.message_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        master_notification_manager.update_notification_time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
        master_notification_manager.clear_old_messages(keep_last=3)
        
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def check_and_send_new_notification(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤"""
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    
    # –°–ù–ê–ß–ê–õ–ê –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–°–´ –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
    updated_count = await update_message_funnel_statuses()
    if updated_count > 0:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –ü–û–¢–û–ú –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
    await send_new_master_notification(context)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–í–ï–¢–û–í –ú–ï–ù–ï–î–ñ–ï–†–ê ==========

async def handle_manager_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    if not update or not update.message:
        return
        
    username = update.message.from_user.username
    if not is_manager(update.message.from_user.id, username):
        return
        
    # –ï–°–õ–ò –≠–¢–û –ö–û–ú–ê–ù–î–ê - –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ó–î–ï–°–¨, –û–ù–ê –û–ë–†–ê–ë–û–¢–ê–ï–¢–°–Ø CommandHandler
    if update.message.text and update.message.text.startswith('/'):
        logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {update.message.from_user.id}, –ø–µ—Ä–µ–¥–∞–µ–º CommandHandler")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
    chat_id = update.message.chat.id
    logger.info(f"üîç –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤ —á–∞—Ç–µ {chat_id}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ pending –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    removed_count = pending_messages_manager.remove_all_chat_messages(chat_id)
    
    if removed_count > 0:
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        await send_new_master_notification(context, force=True)

# ========== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–ê–°–¢–û–ú–ù–´–• –ö–û–ú–ê–ù–î ==========

async def create_command_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üÜï **–°–û–ó–î–ê–¢–¨ –ö–û–ú–ê–ù–î–£**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_command <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ç–∏–ø> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
            "**–¢–∏–ø—ã:**\n"
            "‚Ä¢ `text` - —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
            "‚Ä¢ `photo` - –∫–æ–º–∞–Ω–¥–∞ —Å —Ñ–æ—Ç–æ\n"
            "‚Ä¢ `document` - –∫–æ–º–∞–Ω–¥–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º\n"
            "‚Ä¢ `video` - –∫–æ–º–∞–Ω–¥–∞ —Å –≤–∏–¥–µ–æ\n"
            "‚Ä¢ `audio` - –∫–æ–º–∞–Ω–¥–∞ —Å –∞—É–¥–∏–æ\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "`/create_command price text –ù–∞—à–∏ —Ü–µ–Ω—ã`\n"
            "`/create_command rules document –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–∞–Ω–∏–∏`\n"
            "`/create_command contacts text –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`\n"
            "`/create_command demo video –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è`"
        )
        return
    
    command_name = context.args[0].lower().lstrip('/')
    content_type = context.args[1].lower()
    description = ' '.join(context.args[2:]) if len(context.args) > 2 else ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞
    if content_type not in ['text', 'photo', 'document', 'video', 'audio']:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: text, photo, document, video, audio"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥–∞
    if command_name in custom_commands_manager.get_all_commands():
        await update.message.reply_text(
            f"‚ùå –ö–æ–º–∞–Ω–¥–∞ `/{command_name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_command –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
        )
        return
    
    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    if content_type == 'text':
        if not description:
            await update.message.reply_text(
                f"üìù **–°–û–ó–î–ê–ù–ò–ï –¢–ï–ö–°–¢–û–í–û–ô –ö–û–ú–ê–ù–î–´** `/{command_name}`\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã:"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['creating_command'] = {
                'name': command_name,
                'type': content_type,
                'description': description
            }
        else:
            # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            custom_commands_manager.add_command(command_name, content_type, description, description)
            await update.message.reply_text(
                f"‚úÖ **–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                f"üÜï `/{command_name}` - {description}\n"
                f"üìù –¢–∏–ø: —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/{command_name}`"
            )
    
    # –î–ª—è —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –∂–¥–µ–º —Ñ–∞–π–ª
    else:
        file_types = {
            'photo': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'document': '–¥–æ–∫—É–º–µ–Ω—Ç', 
            'video': '–≤–∏–¥–µ–æ',
            'audio': '–∞—É–¥–∏–æ'
        }
        
        await update.message.reply_text(
            f"üìé **–°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´** `/{command_name}`\n\n"
            f"–¢–∏–ø: {content_type}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üì§ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª** ({file_types[content_type]}) "
            f"–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∫–æ–º–∞–Ω–¥–µ:"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data['creating_command'] = {
            'name': command_name,
            'type': content_type,
            'description': description
        }

async def handle_file_for_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        return
    
    creating_data = context.user_data.get('creating_command')
    if not creating_data:
        return
    
    command_name = creating_data['name']
    content_type = creating_data['type']
    description = creating_data['description']
    
    try:
        ensure_assets_folder()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ assets
        assets_path = os.path.join(os.getcwd(), 'assets')
        logger.info(f"üìÅ –†–∞–±–æ—Ç–∞ —Å –ø–∞–ø–∫–æ–π: {assets_path}")
        
        file_processed = False
        file_name = ""
        file_path = ""
        
        if content_type == 'photo' and update.message.photo:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_extension = '.jpg'
            file_name = f"cmd_{command_name}{file_extension}"
            file_path = os.path.join(assets_path, file_name)
            
            logger.info(f"üì∏ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –≤: {file_path}")
            photo_file = await update.message.photo[-1].get_file()
            await photo_file.download_to_drive(file_path)
            file_processed = True
            
        elif content_type == 'document' and update.message.document:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = update.message.document
            original_name = document.file_name or 'file.bin'
            file_extension = os.path.splitext(original_name)[1]
            file_name = f"cmd_{command_name}{file_extension}"
            file_path = os.path.join(assets_path, file_name)
            
            logger.info(f"üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤: {file_path}")
            file = await document.get_file()
            await file.download_to_drive(file_path)
            file_processed = True
            
        elif content_type == 'video' and update.message.video:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            video = update.message.video
            file_extension = '.mp4'
            file_name = f"cmd_{command_name}{file_extension}"
            file_path = os.path.join(assets_path, file_name)
            
            logger.info(f"üé• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤: {file_path}")
            file = await video.get_file()
            await file.download_to_drive(file_path)
            file_processed = True
            
        elif content_type == 'audio' and update.message.audio:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            audio = update.message.audio
            file_extension = '.mp3'
            file_name = f"cmd_{command_name}{file_extension}"
            file_path = os.path.join(assets_path, file_name)
            
            logger.info(f"üéµ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤: {file_path}")
            file = await audio.get_file()
            await file.download_to_drive(file_path)
            file_processed = True
        
        if file_processed:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
            if os.path.exists(file_path):
                file_size = os.path.getsize(file_path)
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path} ({file_size} –±–∞–π—Ç)")
                
                custom_commands_manager.add_command(command_name, content_type, file_name, description)
                
                type_emojis = {
                    'photo': 'üì∏',
                    'document': 'üìÑ', 
                    'video': 'üé•',
                    'audio': 'üéµ'
                }
                
                await update.message.reply_text(
                    f"‚úÖ **–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"üÜï `/{command_name}` - {description}\n"
                    f"{type_emojis.get(content_type, 'üìé')} –¢–∏–ø: –∫–æ–º–∞–Ω–¥–∞ —Å {content_type}\n"
                    f"üíæ –§–∞–π–ª: {file_name}\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n\n"
                    f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/{command_name}`"
                )
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command_name} —Å —Ñ–∞–π–ª–æ–º {file_name}")
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–∏—Å–∫")
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {file_path}")
                return
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª."
            )
            return
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'creating_command' in context.user_data:
            del context.user_data['creating_command']
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

async def handle_text_for_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        return
    
    creating_data = context.user_data.get('creating_command')
    if not creating_data:
        return
    
    command_name = creating_data['name']
    content_type = creating_data['type']
    description = creating_data['description']
    
    if content_type == 'text':
        text_content = update.message.text
        
        custom_commands_manager.add_command(command_name, content_type, text_content, description)
        
        await update.message.reply_text(
            f"‚úÖ **–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"üÜï `/{command_name}` - {description}\n"
            f"üìù –¢–∏–ø: —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
            f"üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {text_content[:100]}{'...' if len(text_content) > 100 else ''}\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/{command_name}`"
        )
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /{command_name}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'creating_command' in context.user_data:
            del context.user_data['creating_command']

async def edit_command_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ö–û–ú–ê–ù–î–£**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_command <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /list_commands"
        )
        return
    
    command_name = context.args[0].lower().lstrip('/')
    command = custom_commands_manager.get_command(command_name)
    
    if not command:
        await update.message.reply_text(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ `/{command_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await update.message.reply_text(
        f"‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´** `/{command_name}`\n\n"
        f"–¢–∏–ø: {command['type']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {command['description']}\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª (–¥–ª—è —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ)\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_command –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
    )
    
    context.user_data['editing_command'] = command_name

async def delete_command_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üóëÔ∏è **–£–î–ê–õ–ò–¢–¨ –ö–û–ú–ê–ù–î–£**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_command <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /list_commands"
        )
        return
    
    command_name = context.args[0].lower().lstrip('/')
    
    if custom_commands_manager.remove_command(command_name):
        await update.message.reply_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ `/{command_name}` —É–¥–∞–ª–µ–Ω–∞")
    else:
        await update.message.reply_text(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ `/{command_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def list_commands_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    if not update or not update.message:
        return
        
    commands = custom_commands_manager.get_all_commands()
    
    if not commands:
        await update.message.reply_text(
            "üìù **–ö–ê–°–¢–û–ú–ù–´–ï –ö–û–ú–ê–ù–î–´**\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_command —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!"
        )
        return
    
    text = "üìù **–í–°–ï –ö–ê–°–¢–û–ú–ù–´–ï –ö–û–ú–ê–ù–î–´**\n\n"
    
    for i, (cmd_name, cmd_data) in enumerate(commands.items(), 1):
        type_emoji = {
            'text': 'üìù',
            'photo': 'üì∏', 
            'document': 'üìÑ',
            'video': 'üé•',
            'audio': 'üéµ'
        }.get(cmd_data['type'], 'üìé')
        
        text += f"{i}. `/{cmd_name}` {type_emoji}\n"
        text += f"   üìã {cmd_data['description']}\n"
        text += f"   ‚öôÔ∏è –¢–∏–ø: {cmd_data['type']}\n\n"
    
    text += f"üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(commands)}\n"
    text += "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /create_command, /edit_command, /delete_command"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def handle_custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    if not update or not update.message:
        logger.error("‚ùå handle_custom_command: –Ω–µ—Ç update –∏–ª–∏ message")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ /)
    command_text = update.message.text
    command_name = command_text.lstrip('/').split(' ')[0].lower()
    
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: '{command_text}' -> –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è: '{command_name}'")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    all_commands = list(custom_commands_manager.get_all_commands().keys())
    logger.info(f"üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {all_commands}")
    
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    command = custom_commands_manager.get_command(command_name)
    if not command:
        logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
        logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {all_commands}")
        return
    
    logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: /{command_name} (—Ç–∏–ø: {command['type']})")
    
    try:
        if command['type'] == 'text':
            await update.message.reply_text(
                command['content'],
                parse_mode='Markdown'
            )
        
        elif command['type'] == 'photo':
            file_path = os.path.join('assets', command['content'])
            logger.info(f"üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: {file_path}")
            if os.path.exists(file_path):
                logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞...")
                with open(file_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=command.get('description', ''),
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        elif command['type'] == 'document':
            file_path = os.path.join('assets', command['content'])
            logger.info(f"üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: {file_path}")
            if os.path.exists(file_path):
                logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞...")
                with open(file_path, 'rb') as document:
                    await update.message.reply_document(
                        document=document,
                        filename=command['content'],
                        caption=command.get('description', ''),
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        elif command['type'] == 'video':
            file_path = os.path.join('assets', command['content'])
            logger.info(f"üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: {file_path}")
            if os.path.exists(file_path):
                logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞...")
                with open(file_path, 'rb') as video:
                    await update.message.reply_video(
                        video=video,
                        caption=command.get('description', ''),
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        elif command['type'] == 'audio':
            file_path = os.path.join('assets', command['content'])
            logger.info(f"üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: {file_path}")
            if os.path.exists(file_path):
                logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞...")
                with open(file_path, 'rb') as audio:
                    await update.message.reply_audio(
                        audio=audio,
                        caption=command.get('description', ''),
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: /{command_name}")
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /{command_name}: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

async def check_files_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –≤ assets"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    assets_path = os.path.join(os.getcwd(), 'assets')
    
    if not os.path.exists(assets_path):
        await update.message.reply_text("‚ùå –ü–∞–ø–∫–∞ assets –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    files = os.listdir(assets_path)
    
    if not files:
        await update.message.reply_text("üìÅ –ü–∞–ø–∫–∞ assets –ø—É—Å—Ç–∞")
        return
    
    text = "üìÅ **–§–ê–ô–õ–´ –í ASSETS:**\n\n"
    for i, file in enumerate(files, 1):
        file_path = os.path.join(assets_path, file)
        file_size = os.path.getsize(file_path)
        text += f"{i}. `{file}` - {file_size} –±–∞–π—Ç\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}"
    
    await update.message.reply_text(text, parse_mode='Markdown')

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/funnels - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫\n"
        "/pending - —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö\n"
        "/managers - —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ø–æ–º–æ—â—å\n\n"
        "üÜï **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏:**\n"
        "/create_command - —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
        "/edit_command - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
        "/delete_command - —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
        "/list_commands - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/check_files - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã\n\n"
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏:**\n"
        "/add_exception - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ\n"
        "/remove_exception - —É–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ\n"
        "/list_exceptions - —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n"
        "/clear_exceptions - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    help_text = """
üìñ **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú –ë–û–¢–ê**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∞–º–∏:**
/funnels - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫
/set_funnel_1 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 1-–π –≤–æ—Ä–æ–Ω–∫–∏
/set_funnel_2 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 2-–π –≤–æ—Ä–æ–Ω–∫–∏  
/set_funnel_3 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 3-–π –≤–æ—Ä–æ–Ω–∫–∏
/reset_funnels - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫
/force_update_funnels - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫

**üÜï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:**
/create_command - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
/edit_command - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
/delete_command - —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É  
/list_commands - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/check_files - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –≤ assets

**–†–∞–±–æ—á–∏–π —á–∞—Ç:**
/set_work_chat - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ —Ä–∞–±–æ—á–∏–π (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:**
/pending - —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
/clear_chat - –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
/clear_all - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏:**
/add_exception <ID/@username> - –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
/remove_exception <ID/@username> - —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
/list_exceptions - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
/clear_exceptions - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

**–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/update_notification - –æ–±–Ω–æ–≤–∏—Ç—å –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/managers - —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

üìù **–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–æ–Ω–æ–∫:**
üü° –í–æ—Ä–æ–Ω–∫–∞ 1: —á–µ—Ä–µ–∑ 1 —á–∞—Å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
üü† –í–æ—Ä–æ–Ω–∫–∞ 2: —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3: —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
**–ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø** - –∫–∞–∂–¥—ã–π —á–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ

üÜï **–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ!
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    FUNNELS = funnels_config.get_funnels()
    now = datetime.now(MOSCOW_TZ)
    excluded_users = excluded_users_manager.get_all_excluded()
    total_excluded = len(excluded_users["user_ids"]) + len(excluded_users["usernames"])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    all_messages = pending_messages_manager.get_all_pending_messages()
    chats_data = {}
    
    for msg in all_messages:
        chat_id = msg['chat_id']
        if chat_id not in chats_data:
            chats_data[chat_id] = {'current_funnel': 0}
        
        current_funnel = msg.get('current_funnel', 0)
        if current_funnel > chats_data[chat_id]['current_funnel']:
            chats_data[chat_id]['current_funnel'] = current_funnel
    
    funnel_1_count = sum(1 for chat_data in chats_data.values() if chat_data['current_funnel'] == 1)
    funnel_2_count = sum(1 for chat_data in chats_data.values() if chat_data['current_funnel'] == 2)
    funnel_3_count = sum(1 for chat_data in chats_data.values() if chat_data['current_funnel'] == 3)
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_notification = master_notification_manager.last_notification_time
    last_notification_str = last_notification.strftime('%H:%M:%S') if last_notification else "–ù–∏–∫–æ–≥–¥–∞"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    custom_commands = custom_commands_manager.get_all_commands()
    command_stats = {}
    for cmd in custom_commands.values():
        cmd_type = cmd['type']
        command_stats[cmd_type] = command_stats.get(cmd_type, 0) + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É assets
    assets_path = os.path.join(os.getcwd(), 'assets')
    assets_exists = os.path.exists(assets_path)
    assets_files = len(os.listdir(assets_path)) if assets_exists else 0
    
    status_text = f"""
üìä **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´**

‚è∞ **–í—Ä–µ–º—è:** {now.strftime('%d.%m.%Y %H:%M:%S')}
üïê **–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:** {'‚úÖ –î–ê' if is_working_hours() else '‚ùå –ù–ï–¢'}

üìã **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** {len(all_messages)}
üö© **–§–ª–∞–≥–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤:** {flags_manager.count_flags()}
üí¨ **–†–∞–±–æ—á–∏–π —á–∞—Ç:** {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if work_chat_manager.is_work_chat_set() else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üì¢ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** {last_notification_str}

üÜï **–ö–ê–°–¢–û–ú–ù–´–ï –ö–û–ú–ê–ù–î–´:** {len(custom_commands)}
üìù –¢–µ–∫—Å—Ç: {command_stats.get('text', 0)}
üì∏ –§–æ—Ç–æ: {command_stats.get('photo', 0)}
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {command_stats.get('document', 0)}
üé• –í–∏–¥–µ–æ: {command_stats.get('video', 0)}
üéµ –ê—É–¥–∏–æ: {command_stats.get('audio', 0)}
üìÅ **–ü–∞–ø–∫–∞ assets:** {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if assets_exists else '‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}
üìÑ **–§–∞–π–ª–æ–≤ –≤ assets:** {assets_files}

‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –í–û–†–û–ù–û–ö:**
üü° –í–æ—Ä–æ–Ω–∫–∞ 1: {FUNNELS[1]} –º–∏–Ω ({minutes_to_hours_text(FUNNELS[1])}) - {funnel_1_count} —á–∞—Ç–æ–≤
üü† –í–æ—Ä–æ–Ω–∫–∞ 2: {FUNNELS[2]} –º–∏–Ω ({minutes_to_hours_text(FUNNELS[2])}) - {funnel_2_count} —á–∞—Ç–æ–≤
üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3: {FUNNELS[3]} –º–∏–Ω ({minutes_to_hours_text(FUNNELS[3])}) - {funnel_3_count} —á–∞—Ç–æ–≤

üë• **–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:** {total_excluded} ({len(excluded_users["user_ids"])} ID + {len(excluded_users["usernames"])} username)

üîÑ **–õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚è≥ **Cooldown:** {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if not master_notification_manager.should_update() else '‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å'}
üîß **–õ–æ–≥–∏–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫:** ‚úÖ –ë–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (1 —á–∞—Ç = 1 –≤–æ—Ä–æ–Ω–∫–∞)
    """
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    FUNNELS = funnels_config.get_funnels()
    
    text = "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –í–û–†–û–ù–û–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**\n\n"
    text += f"üü° –í–æ—Ä–æ–Ω–∫–∞ 1: {FUNNELS[1]} –º–∏–Ω—É—Ç ({minutes_to_hours_text(FUNNELS[1])})\n"
    text += f"üü† –í–æ—Ä–æ–Ω–∫–∞ 2: {FUNNELS[2]} –º–∏–Ω—É—Ç ({minutes_to_hours_text(FUNNELS[2])})\n"
    text += f"üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3: {FUNNELS[3]} –º–∏–Ω—É—Ç ({minutes_to_hours_text(FUNNELS[3])})\n\n"
    text += "üí° **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
    text += "/set_funnel_1 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1-—é –≤–æ—Ä–æ–Ω–∫—É\n"
    text += "/set_funnel_2 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 2-—é –≤–æ—Ä–æ–Ω–∫—É\n"
    text += "/set_funnel_3 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 3-—é –≤–æ—Ä–æ–Ω–∫—É\n"
    text += "/reset_funnels - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def set_funnel_1_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ 1"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö: /set_funnel_1 <–º–∏–Ω—É—Ç—ã>")
        return
    
    try:
        minutes = int(context.args[0])
        if minutes <= 0:
            await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        if funnels_config.set_funnel_interval(1, minutes):
            await update.message.reply_text(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ 1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç ({minutes_to_hours_text(minutes)})")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–æ–Ω–∫–∏")
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")

async def set_funnel_2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ 2"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö: /set_funnel_2 <–º–∏–Ω—É—Ç—ã>")
        return
    
    try:
        minutes = int(context.args[0])
        if minutes <= 0:
            await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        if funnels_config.set_funnel_interval(2, minutes):
            await update.message.reply_text(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç ({minutes_to_hours_text(minutes)})")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–æ–Ω–∫–∏")
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")

async def set_funnel_3_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ 3"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö: /set_funnel_3 <–º–∏–Ω—É—Ç—ã>")
        return
    
    try:
        minutes = int(context.args[0])
        if minutes <= 0:
            await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        if funnels_config.set_funnel_interval(3, minutes):
            await update.message.reply_text(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ 3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç ({minutes_to_hours_text(minutes)})")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–æ–Ω–∫–∏")
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")

async def reset_funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    funnels_config.reset_to_default()
    await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

async def force_update_funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    updated_count = await update_message_funnel_statuses()
    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫ –¥–ª—è {updated_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

async def set_work_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∫–∞–∫ —Ä–∞–±–æ—á–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    chat_id = update.message.chat.id
    chat_title = update.message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    if work_chat_manager.save_work_chat(chat_id):
        await update.message.reply_text(
            f"‚úÖ **–≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ä–∞–±–æ—á–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n"
            f"üÜî ID: {chat_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞."
        )
        logger.info(f"‚úÖ –†–∞–±–æ—á–∏–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_title} (ID: {chat_id})")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await send_new_master_notification(context, force=True)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞")

async def managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    excluded_users = excluded_users_manager.get_all_excluded()
    
    text = "üë• **–°–ü–ò–°–û–ö –ú–ï–ù–ï–î–ñ–ï–†–û–í**\n\n"
    
    text += "üîπ **–ü–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
    if excluded_users["user_ids"]:
        for user_id in excluded_users["user_ids"]:
            text += f"  ‚Ä¢ {user_id}\n"
    else:
        text += "  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID\n"
    
    text += "\nüîπ **–ü–æ username:**\n"
    if excluded_users["usernames"]:
        for username in excluded_users["usernames"]:
            text += f"  ‚Ä¢ @{username}\n"
    else:
        text += "  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(excluded_users['user_ids']) + len(excluded_users['usernames'])}"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    all_messages = pending_messages_manager.get_all_pending_messages()
    flags_count = flags_manager.count_flags()
    excluded_users = excluded_users_manager.get_all_excluded()
    total_excluded = len(excluded_users["user_ids"]) + len(excluded_users["usernames"])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
    chats_data = {}
    for msg in all_messages:
        chat_id = msg['chat_id']
        if chat_id not in chats_data:
            chats_data[chat_id] = {
                'count': 0,
                'title': msg.get('chat_title', f'–ß–∞—Ç {chat_id}'),
                'oldest': msg['timestamp']
            }
        chats_data[chat_id]['count'] += 1
        if msg['timestamp'] < chats_data[chat_id]['oldest']:
            chats_data[chat_id]['oldest'] = msg['timestamp']
    
    text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
    text += f"üì® **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** {len(all_messages)}\n"
    text += f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:** {len(chats_data)}\n"
    text += f"üö© **–§–ª–∞–≥–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤:** {flags_count}\n"
    text += f"üë• **–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:** {total_excluded}\n"
    text += f"üÜï **–ö–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** {len(custom_commands_manager.get_all_commands())}\n\n"
    
    text += "üìã **–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º:**\n"
    if chats_data:
        for chat_id, data in list(chats_data.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤
            time_ago = format_time_ago(data['oldest'])
            text += f"  ‚Ä¢ {data['title']}: {data['count']} —Å–æ–æ–±—â. ({time_ago} –Ω–∞–∑–∞–¥)\n"
        if len(chats_data) > 10:
            text += f"  ... –∏ –µ—â–µ {len(chats_data) - 10} —á–∞—Ç–æ–≤\n"
    else:
        text += "  –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    all_messages = pending_messages_manager.get_all_pending_messages()
    
    if not all_messages:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    text = "üìã **–ù–ï–ü–†–û–ß–ò–¢–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø**\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
    chats_data = {}
    for msg in all_messages:
        chat_id = msg['chat_id']
        if chat_id not in chats_data:
            chats_data[chat_id] = {
                'messages': [],
                'title': msg.get('chat_title', f'–ß–∞—Ç {chat_id}'),
                'oldest': msg['timestamp']
            }
        chats_data[chat_id]['messages'].append(msg)
        if msg['timestamp'] < chats_data[chat_id]['oldest']:
            chats_data[chat_id]['oldest'] = msg['timestamp']
    
    for chat_id, data in chats_data.items():
        time_ago = format_time_ago(data['oldest'])
        funnel = max(msg.get('current_funnel', 0) for msg in data['messages'])
        funnel_emoji = get_funnel_emoji(funnel)
        
        text += f"{funnel_emoji} **{data['title']}**\n"
        text += f"   üì® –°–æ–æ–±—â–µ–Ω–∏–π: {len(data['messages'])}\n"
        text += f"   ‚è∞ –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ: {time_ago} –Ω–∞–∑–∞–¥\n"
        text += f"   üö™ –í–æ—Ä–æ–Ω–∫–∞: {funnel}\n\n"
    
    text += f"üìä –í—Å–µ–≥–æ: {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {len(chats_data)} —á–∞—Ç–∞—Ö"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def clear_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    chat_id = update.message.chat.id
    removed_count = pending_messages_manager.remove_all_chat_messages(chat_id)
    
    if removed_count > 0:
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
        # –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await send_new_master_notification(context, force=True)
    else:
        await update.message.reply_text("‚úÖ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

async def clear_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    removed_count = pending_messages_manager.clear_all()
    
    if removed_count > 0:
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({removed_count} —à—Ç.)")
        # –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await send_new_master_notification(context, force=True)
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")

async def add_exception_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üë• **–î–û–ë–ê–í–ò–¢–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_exception <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add_exception 123456789\n"
            "/add_exception @username"
        )
        return
    
    identifier = context.args[0]
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ ID
    if identifier.isdigit():
        user_id = int(identifier)
        if excluded_users_manager.add_user_id(user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    # –ò–ª–∏ –∫–∞–∫ username
    elif identifier.startswith('@'):
        username = identifier.lstrip('@')
        if excluded_users_manager.add_username(username):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username")

async def remove_exception_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üë• **–£–î–ê–õ–ò–¢–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_exception <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/remove_exception 123456789\n"
            "/remove_exception @username"
        )
        return
    
    identifier = context.args[0]
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ ID
    if identifier.isdigit():
        user_id = int(identifier)
        if excluded_users_manager.remove_user_id(user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö")
    # –ò–ª–∏ –∫–∞–∫ username
    elif identifier.startswith('@'):
        username = identifier.lstrip('@')
        if excluded_users_manager.remove_username(username):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username")

async def list_exceptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await managers_command(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é

async def clear_exceptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    excluded_users_manager.clear_all()
    await update.message.reply_text("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")

async def update_notification_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–∏—Ç—å –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    await send_new_master_notification(context, force=True)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    if not update or not update.message:
        return
        
    chat_title = update.message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat_title} - {update.message.text[:50] if update.message.text else '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}...")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if update.message.from_user.id == context.bot.id:
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–Ω–æ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã CommandHandler)
    username = update.message.from_user.username
    if is_manager(update.message.from_user.id, username):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è CommandHandler
        if update.message.text and update.message.text.startswith('/'):
            logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {update.message.from_user.id}, –ø–µ—Ä–µ–¥–∞–µ–º CommandHandler")
            return
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        else:
            logger.info(f"üîç –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {update.message.from_user.id}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
            await handle_manager_reply(update, context)
            return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message.new_chat_members or 
        update.message.left_chat_member or 
        update.message.pinned_message or
        update.edited_message):
        logger.info("üîç –°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ CommandHandler)
    if update.message.text and update.message.text.startswith('/'):
        logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ {update.message.text}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è CommandHandler")
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message.text and len(update.message.text.strip()) < 1:
        logger.info("üîç –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    logger.info(f"üîç –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    chat_id = update.message.chat.id
    if not is_working_hours():
        # –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
        replied_key = f'chat_{chat_id}'
        if not flags_manager.has_replied(replied_key):
            logger.info(f"üïê –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {chat_id}")
            await update.message.reply_text(AUTO_REPLY_MESSAGE)
            flags_manager.set_replied(replied_key)
            logger.info(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} (–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)")
        else:
            logger.info(f"üïê –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç —Ä–∞–Ω–µ–µ")
    else:
        # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        replied_key = f'chat_{chat_id}'
        if flags_manager.has_replied(replied_key):
            flags_manager.clear_replied(replied_key)
        
        username = update.message.from_user.username
        first_name = update.message.from_user.first_name
        message_text = update.message.text or update.message.caption or "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
        
        logger.info(f"üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {message_text[:50]}...")
        
        pending_messages_manager.add_message(
            chat_id=update.message.chat.id,
            user_id=update.message.from_user.id,
            message_text=message_text,
            message_id=update.message.message_id,
            chat_title=chat_title,
            username=username,
            first_name=first_name
        )
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: —á–∞—Ç '{chat_title}', –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name or username or update.message.from_user.id}")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await send_new_master_notification(context, force=True)

async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not update or not update.message:
        return
        
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.id}: {update.message.text[:50] if update.message.text else '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}...")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if update.message.from_user.id == context.bot.id:
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    username = update.message.from_user.username
    if is_manager(update.message.from_user.id, username):
        logger.info(f"üîç –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {update.message.from_user.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        await handle_manager_reply(update, context)
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message.new_chat_members or 
        update.message.left_chat_member or 
        update.message.pinned_message or
        update.edited_message):
        logger.info("üîç –°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ CommandHandler)
    if update.message.text and update.message.text.startswith('/'):
        logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ {update.message.text}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è CommandHandler")
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message.text and len(update.message.text.strip()) < 1:
        logger.info("üîç –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    logger.info(f"üîç –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    user_id = update.message.from_user.id
    if not is_working_hours():
        # –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
        replied_key = f'user_{user_id}'
        if not flags_manager.has_replied(replied_key):
            logger.info(f"üïê –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await update.message.reply_text(AUTO_REPLY_MESSAGE)
            flags_manager.set_replied(replied_key)
            logger.info(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)")
        else:
            logger.info(f"üïê –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–Ω–µ–µ")
    else:
        # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        replied_key = f'user_{user_id}'
        if flags_manager.has_replied(replied_key):
            flags_manager.clear_replied(replied_key)
        
        username = update.message.from_user.username
        first_name = update.message.from_user.first_name
        message_text = update.message.text or update.message.caption or "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
        
        logger.info(f"üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {message_text[:50]}...")
        
        pending_messages_manager.add_message(
            chat_id=update.message.chat.id,
            user_id=update.message.from_user.id,
            message_text=message_text,
            message_id=update.message.message_id,
            username=username,
            first_name=first_name
        )
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name or username or user_id}")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await send_new_master_notification(context, force=True)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ - –ª–æ–≥–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")
    
    if update:
        logger.error(f"üí• Update object: {update}")
        if update.message:
            logger.error(f"üí• Message info: chat_id={update.message.chat.id}, user_id={update.message.from_user.id if update.message.from_user else 'None'}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    logger.error(f"üí• Traceback: {context.error.__traceback__}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    global application  # –î–µ–ª–∞–µ–º application –≥–ª–æ–±–∞–ª—å–Ω–æ–π
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("=" * 50)
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 50)

        current_dir = os.getcwd()
        print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
        print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {os.listdir(current_dir)}")

        assets_path = os.path.join(current_dir, 'assets')
        print(f"üìÅ –ü—É—Ç—å –∫ assets: {assets_path}")
        print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(assets_path)}")

        if os.path.exists(assets_path):
            print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ assets: {os.listdir(assets_path)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
            test_file = os.path.join(assets_path, 'test_write.txt')
            try:
                with open(test_file, 'w') as f:
                    f.write('test')
                print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: OK")
                os.remove(test_file)
            except Exception as e:
                print(f"‚ùå –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
        else:
            print("‚ùå –ü–∞–ø–∫–∞ assets –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
            os.makedirs(assets_path)
            print("‚úÖ –ü–∞–ø–∫–∞ assets —Å–æ–∑–¥–∞–Ω–∞")

        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ensure_assets_folder()
        
        print("=" * 50)
        print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê-–ê–í–¢–û–û–¢–í–ï–¢–ß–ò–ö–ê")
        print("üÜï –° –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–û–ô –ö–û–ú–ê–ù–î")
        print("=" * 50)
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –°–ù–ê–ß–ê–õ–ê —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–í–´–ú–ò)
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.add_handler(MessageHandler(
            filters.TEXT | filters.CAPTION | filters.PHOTO | filters.Document.ALL, 
            handle_group_message
        ))
        application.add_handler(MessageHandler(
            filters.TEXT | filters.CAPTION | filters.PHOTO | filters.Document.ALL,
            handle_private_message
        ))
        
        # –ü–û–¢–û–ú —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –í–°–ï –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...")
        custom_commands_manager.register_all_handlers()
        
        # –ó–ê–¢–ï–ú –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("check_files", check_files_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        application.add_handler(CommandHandler("create_command", create_command_command))
        application.add_handler(CommandHandler("edit_command", edit_command_command))
        application.add_handler(CommandHandler("delete_command", delete_command_command))
        application.add_handler(CommandHandler("list_commands", list_commands_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        application.add_handler(MessageHandler(
            filters.PHOTO | filters.Document.ALL | filters.VIDEO | filters.AUDIO,
            handle_file_for_command
        ))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_text_for_command
        ))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∞–º–∏
        application.add_handler(CommandHandler("funnels", funnels_command))
        application.add_handler(CommandHandler("set_funnel_1", set_funnel_1_command))
        application.add_handler(CommandHandler("set_funnel_2", set_funnel_2_command))
        application.add_handler(CommandHandler("set_funnel_3", set_funnel_3_command))
        application.add_handler(CommandHandler("reset_funnels", reset_funnels_command))
        application.add_handler(CommandHandler("force_update_funnels", force_update_funnels_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        application.add_handler(CommandHandler("update_notification", update_notification_command))
        application.add_handler(CommandHandler("test_notification", test_notification_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        application.add_handler(CommandHandler("add_exception", add_exception_command))
        application.add_handler(CommandHandler("remove_exception", remove_exception_command))
        application.add_handler(CommandHandler("list_exceptions", list_exceptions_command))
        application.add_handler(CommandHandler("clear_exceptions", clear_exceptions_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        application.add_handler(CommandHandler("clear_chat", clear_chat_command))
        application.add_handler(CommandHandler("clear_all", clear_all_command))
        application.add_handler(CommandHandler("pending", pending_command))
        
        # –î—Ä—É–≥–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("set_work_chat", set_work_chat_command))
        application.add_handler(CommandHandler("managers", managers_command))
        application.add_handler(CommandHandler("stats", stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_repeating(check_and_send_new_notification, interval=900, first=10)  # 15 –º–∏–Ω—É—Ç
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)")
            print("üõ°Ô∏è  COOLDOWN –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫")
            print("üîß –õ–û–ì–ò–ö–ê –í–û–†–û–ù–û–ö: –ë–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (1 —á–∞—Ç = 1 –≤–æ—Ä–æ–Ω–∫–∞)")
            print("üÜï –°–ò–°–¢–ï–ú–ê –ö–û–ú–ê–ù–î: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –∫–æ–º–∞–Ω–¥—ã!")
        else:
            print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫
        FUNNELS = funnels_config.get_funnels()
        excluded_users = excluded_users_manager.get_all_excluded()
        total_excluded = len(excluded_users["user_ids"]) + len(excluded_users["usernames"])
        custom_commands = custom_commands_manager.get_all_commands()
        
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–ª–∞–≥–æ–≤: {flags_manager.count_flags()}")
        print(f"üìã –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(pending_messages_manager.get_all_pending_messages())}")
        print(f"üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_excluded}")
        print(f"üÜï –ö–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {len(custom_commands)}")
        print(f"‚öôÔ∏è –í–æ—Ä–æ–Ω–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {FUNNELS}")
        
        if work_chat_manager.is_work_chat_set():
            print(f"üí¨ –†–∞–±–æ—á–∏–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {work_chat_manager.get_work_chat_id()}")
        else:
            print("‚ö†Ô∏è –†–∞–±–æ—á–∏–π —á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_work_chat")
        
        print("üîÑ –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–û–ì–û + –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–ì–û –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç")
        print("‚è≥ COOLDOWN: 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏")
        print("üîß –õ–û–ì–ò–ö–ê –í–û–†–û–ù–û–ö: –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (1 —á–∞—Ç = 1 –≤–æ—Ä–æ–Ω–∫–∞)")
        print("üÜï –ö–ê–°–¢–û–ú–ù–´–ï –ö–û–ú–ê–ù–î–´: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ")
        print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("=" * 50)
        
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=False,
            close_loop=False
        )
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"üí• Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    main()

